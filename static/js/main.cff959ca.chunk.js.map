{"version":3,"sources":["app/App.js","themes/default.js","themes/index.js","app/modules/part/reducers/Part.reducer.js","app/modules/part/actions/Types.js","app/store/Reducers.js","app/modules/part/actions/Part.actions.js","app/modules/part/sagas/Part.saga.js","app/store/Sagas.js","serviceWorker.js","index.js","app/store/ConfigureStore.js"],"names":["App","palette","primary","main","light","tinycolor","lighten","toHexString","dark","darken","secondary","contrastText","warning","success","info","text","hint","background","default","customShadows","widget","widgetDark","widgetWide","overrides","MuiBackdrop","root","backgroundColor","MuiMenu","paper","boxShadow","MuiSelect","icon","color","MuiListItem","button","MuiTouchRipple","child","MuiTableRow","height","MuiTableCell","borderBottom","head","fontSize","body","createMuiTheme","defaultTheme","typography","h1","h2","h3","h4","h5","h6","INITIAL_STATE","partList","partListLoading","partListError","ACTION_HANDLERS","state","payload","data","error","createReducer","combineReducers","partState","PartReducer","type","getPartList","watchGetPartList","put","Actions","name","takeLatest","createdPartSaga","PartSaga","all","fork","Boolean","window","location","hostname","match","store","reactotroneStoreActions","middleware","sagaMiddleware","createSagaMiddleware","push","createStore","reducers","applyMiddleware","run","sagas","configureStore","ReactDOM","render","ThemeProvider","theme","Themes","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.cff959ca.chunk.js","sourcesContent":["import React from 'react';\n\nfunction App() {\n  return (\n   <div>App</div>\n  );\n}\n\nexport default App;\n","import tinycolor from \"tinycolor2\";\n\nconst primary = \"#536DFE\";\nconst secondary = \"#FF5C93\";\nconst warning = \"#FFC260\";\nconst success = \"#3CD4A0\";\nconst info = \"#9013FE\";\n\nconst lightenRate = 7.5;\nconst darkenRate = 15;\n\nexport default {\n  palette: {\n    primary: {\n      main: primary,\n      light: tinycolor(primary)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(primary)\n        .darken(darkenRate)\n        .toHexString(),\n    },\n    secondary: {\n      main: secondary,\n      light: tinycolor(secondary)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(secondary)\n        .darken(darkenRate)\n        .toHexString(),\n      contrastText: \"#FFFFFF\",\n    },\n    warning: {\n      main: warning,\n      light: tinycolor(warning)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(warning)\n        .darken(darkenRate)\n        .toHexString(),\n    },\n    success: {\n      main: success,\n      light: tinycolor(success)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(success)\n        .darken(darkenRate)\n        .toHexString(),\n    },\n    info: {\n      main: info,\n      light: tinycolor(info)\n        .lighten(lightenRate)\n        .toHexString(),\n      dark: tinycolor(info)\n        .darken(darkenRate)\n        .toHexString(),\n    },\n    text: {\n      primary: \"#4A4A4A\",\n      secondary: \"#6E6E6E\",\n      hint: \"#B9B9B9\",\n    },\n    background: {\n      default: \"#F6F7FF\",\n      light: \"#F3F5FF\",\n    },\n  },\n  customShadows: {\n    widget:\n      \"0px 3px 11px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\n    widgetDark:\n      \"0px 3px 18px 0px #4558A3B3, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\n    widgetWide:\n      \"0px 12px 33px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\n  },\n  overrides: {\n    MuiBackdrop: {\n      root: {\n        backgroundColor: \"#4A4A4A1A\",\n      },\n    },\n    MuiMenu: {\n      paper: {\n        boxShadow:\n          \"0px 3px 11px 0px #E8EAFC, 0 3px 3px -2px #B2B2B21A, 0 1px 8px 0 #9A9A9A1A\",\n      },\n    },\n    MuiSelect: {\n      icon: {\n        color: \"#B9B9B9\",\n      },\n    },\n    MuiListItem: {\n      root: {\n        \"&$selected\": {\n          backgroundColor: \"#F3F5FF !important\",\n          \"&:focus\": {\n            backgroundColor: \"#F3F5FF\",\n          },\n        },\n      },\n      button: {\n        \"&:hover, &:focus\": {\n          backgroundColor: \"#F3F5FF\",\n        },\n      },\n    },\n    MuiTouchRipple: {\n      child: {\n        backgroundColor: \"white\",\n      },\n    },\n    MuiTableRow: {\n      root: {\n        height: 56,\n      },\n    },\n    MuiTableCell: {\n      root: {\n        borderBottom: \"1px solid rgba(224, 224, 224, .5)\",\n      },\n      head: {\n        fontSize: \"0.95rem\",\n      },\n      body: {\n        fontSize: \"0.95rem\",\n      },\n    },\n  },\n};\n","import defaultTheme from \"./default\";\n\nimport { createMuiTheme } from \"@material-ui/core\";\n\nconst overrides = {\n  typography: {\n    h1: {\n      fontSize: \"3rem\",\n    },\n    h2: {\n      fontSize: \"2rem\",\n    },\n    h3: {\n      fontSize: \"1.64rem\",\n    },\n    h4: {\n      fontSize: \"1.5rem\",\n    },\n    h5: {\n      fontSize: \"1.285rem\",\n    },\n    h6: {\n      fontSize: \"1.142rem\",\n    },\n  },\n};\n\nexport default {\n  default: createMuiTheme({ ...defaultTheme, ...overrides }),\n};\n","// @flow\n\nimport { createReducer } from \"reduxsauce\";\n\nimport {\n  GET_PART_LIST,\n  GET_PART_LIST_SUCCESS,\n  GET_PART_LIST_FAILURE,\n} from \"../actions/Types\";\n\nexport const INITIAL_STATE = {\n  partList: [],\n  partListLoading: false,\n  partListError: null,\n};\n\nexport const getPartList = (\n  state: Object = INITIAL_STATE,\n  { payload }: any\n) => ({\n  ...state,\n  partListLoading: true,\n  partListError: null,\n});\n\nexport const getPartListSuccess = (\n  state: Object = INITIAL_STATE,\n  { payload }: any\n) => ({\n  ...state,\n  partList: payload.data,\n  partListLoading: false,\n  partListError: null,\n});\n\nexport const getPartListFailure = (\n  state: Object = INITIAL_STATE,\n  { payload }: any\n) => ({\n  ...state,\n  partListError: payload.error,\n  partListLoading: false,\n});\n\nconst ACTION_HANDLERS = {\n  [GET_PART_LIST]: getPartList,\n  [GET_PART_LIST_SUCCESS]: getPartListSuccess,\n  [GET_PART_LIST_FAILURE]: getPartListFailure,\n};\n\nexport default createReducer(INITIAL_STATE, ACTION_HANDLERS);\n","// @flow\nexport const GET_PART_LIST = \"GET_PART_LIST\";\nexport const GET_PART_LIST_SUCCESS = \"GET_PART_LIST_SUCCESS\";\nexport const GET_PART_LIST_FAILURE = \"GET_PART_LIST_FAILURE\";\n","// @flow\n\nimport { combineReducers } from \"redux\";\n\nimport PartReducer from \"../modules/part/reducers/Part.reducer\";\n\nexport default combineReducers({\n  partState: PartReducer,\n});\n","// @flow\n\nimport {\n  GET_PART_LIST,\n  GET_PART_LIST_SUCCESS,\n  GET_PART_LIST_FAILURE,\n} from \"./Types\";\n\nconst getPartList = (): Object => ({\n  type: GET_PART_LIST,\n  payload: {},\n});\n\nconst getPartListSuccess = (data: Object): Object => ({\n  type: GET_PART_LIST_SUCCESS,\n  payload: { data },\n});\n\nconst getPartListFailure = (error: Object): Object => ({\n  type: GET_PART_LIST_FAILURE,\n  payload: { error },\n});\n\nexport default {\n  getPartList,\n  getPartListSuccess,\n  getPartListFailure,\n};\n","// @flow\n\nimport { takeLatest, call, put } from \"redux-saga/effects\";\nimport type { Saga } from \"redux-saga\";\n\nimport Actions from \"../actions/Part.actions\";\n\nimport { GET_PART_LIST } from \"../actions/Types\";\n\nexport default () => {\n  function* getPartList({ payload }) {\n    try {\n      yield put(\n        Actions.getPartListSuccess({\n          name: \"Manoj\",\n        })\n      );\n    } catch (error) {\n      yield put(Actions.getPartListFailure(error));\n    }\n  }\n\n  function* watchGetPartList(): Saga<void> {\n    yield takeLatest(GET_PART_LIST, getPartList);\n  }\n\n  return {\n    watchGetPartList,\n  };\n};\n","// @flow\n\nimport { all, fork } from \"redux-saga/effects\";\nimport type { Saga } from \"redux-saga\";\n\nimport PartSaga from \"../modules/part/sagas/Part.saga\";\n\nexport default function* root(): Saga<void> {\n  const createdPartSaga = PartSaga();\n\n  yield all([fork(createdPartSaga.watchGetPartList)]);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport { ThemeProvider } from \"@material-ui/styles\";\nimport { CssBaseline } from \"@material-ui/core\";\n\nimport App from \"app/App\";\nimport Themes from \"themes/index\";\n\nimport configureStore from \"./app/store/ConfigureStore\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nlet reactotroneStoreActions = null;\n\nif (process.env.NODE_ENV && process.env.NODE_ENV === \"development\") {\n  reactotroneStoreActions = require(\"./config/Reactotrone.config\").default;\n}\n\nconst store = configureStore(reactotroneStoreActions);\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={Themes.default}>\n      <CssBaseline />\n      <App />\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// @flow\nimport { createStore, applyMiddleware } from \"redux\";\nimport createSagaMiddleware from \"redux-saga\";\n\nimport reducers from \"./Reducers\";\nimport sagas from \"./Sagas\";\n\nexport default function configureStore(\n  reactotroneStoreActions: any,\n  INITIAL_STATE: any = {}\n) {\n  const middleware = [];\n  const sagaMiddleware = createSagaMiddleware();\n\n  middleware.push(sagaMiddleware);\n\n  const store = (reactotroneStoreActions || createStore)(\n    reducers,\n    INITIAL_STATE,\n    applyMiddleware(...middleware)\n  );\n  sagaMiddleware.run(sagas);\n\n  return store;\n}\n"],"sourceRoot":""}